(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{323:function(a,t,s){"use strict";s.r(t);var n=s(16),r=Object(n.a)({},(function(){var a=this,t=a.$createElement,s=a._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"通用项"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#通用项"}},[a._v("#")]),a._v(" 通用项")]),a._v(" "),s("h2",{attrs:{id:"平面点集的法线识别"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#平面点集的法线识别"}},[a._v("#")]),a._v(" 平面点集的法线识别")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * robust 识别出点集或者多边形的法线\n * @param {Polygon|Array<Point|Vector3>} points\n * @returns {Vector3} 法线\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("recognitionPolygonNormal")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"判断多个点是否共线"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#判断多个点是否共线"}},[a._v("#")]),a._v(" 判断多个点是否共线:")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 判断多个点是否共线:\n * 考虑情况点之间的距离应该大于最小容忍值\n * @param  {...Point} ps\n * @returns {boolean}\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("pointsCollinear")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("...")]),a._v("ps"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"点集操作"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#点集操作"}},[a._v("#")]),a._v(" 点集操作")]),a._v(" "),s("h3",{attrs:{id:"计算包围盒"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#计算包围盒"}},[a._v("#")]),a._v(" 计算包围盒")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 计算包围盒\n * @param {*} points  点集\n * @returns {Array[min,max]} 返回最小最大值\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("boundingBox")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h3",{attrs:{id:"空间操作（平移，旋转是，缩放"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#空间操作（平移，旋转是，缩放"}},[a._v("#")]),a._v(" 空间操作（平移，旋转是，缩放)")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 平移\n * @param {*} points\n * @param {*} distance\n * @param {*} ref\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("translate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" distance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 旋转\n * @param {*} points\n * @param {*} axis\n * @param {*} angle\n * @param {*} ref\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rotate")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" axis"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" angle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 两个向量之间存在的旋转量来旋转点集\n * @param {*} points\n * @param {*} axis\n * @param {*} angle\n * @param {*} ref\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("rotateByUnitVectors")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" vFrom"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" vTo"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 缩放\n * @param {*} points\n * @param {*} axis\n * @param {*} angle\n * @param {*} ref\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("scale")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" scale"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 响应矩阵\n * @param {*} points\n * @param {*} axis\n * @param {*} angle\n * @param {*} ref\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("applyMatrix4")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[a._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" matrix"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" ref "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n")])])]),s("h2",{attrs:{id:"折线或者路径简化"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#折线或者路径简化"}},[a._v("#")]),a._v(" 折线或者路径简化")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("折线或者路径中过密或者过直的点去除"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2020")]),a._v(" 年 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("1")]),a._v(" 月 "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("17")]),a._v(" 增加"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 简化点集数组，折线，路径\n * @param {*} points 点集数组，折线，路径 ,继承Array\n * @param {*} maxDistance  简化最大距离 默认值0.1\n * @param {*} maxAngle  简化最大角度 弧度 默认值 Math.PI / 180 * 5\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("simplifyPointList")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("points"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" maxDistance"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" maxAngle"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"三角剖分"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#三角剖分"}},[a._v("#")]),a._v(" 三角剖分")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 三角剖分  earcut.js\n * @param {Array} boundary 边界\n * @param {Array<Array>} holes 洞的数组\n * @param {options:{feature,dim,normal}} feature 选择平平面\n * @returns {Array<Number>} 三角形索引数组\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("trianglation")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("inboundary"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("holes "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("options "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"挤压"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#挤压"}},[a._v("#")]),a._v(" 挤压")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 挤压\n * @param {Polygon|Array<Point|Vector3> }  shape   多边形或顶点数组\n * @param {Path|Array<Point|Vector3> } path  路径或者或顶点数组\n * @param {Object} options {\n *      isClosed: false,闭合为多边形\n *      isClosed2: false, 闭合为圈\n *      textureEnable: true, 计算纹理坐标\n *      textureScale: new Vector2(1, 1),纹理坐标缩放\n *      smoothAngle: Math.PI / 180 * 30,大于这个角度则不平滑\n *      sealStart: true, 是否密封开始面\n *      sealEnd: true,是否密封结束面}\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("extrude")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("shape"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" arg_path"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("options "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])]),s("h2",{attrs:{id:"缝合"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#缝合"}},[a._v("#")]),a._v(" 缝合")]),a._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 缝合shape集合\n * @param {Array<Array<Point|Vector3>} shapes  路基 点集的集合， 每个shape的点数量一致\n * @param {Boolean} isClosed 每一个shape是否是封闭的圈 默认false\n * @returns {Array} 返回三角形集合 如果有所用范围索引，否则返回顶点\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("linkSides")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("shapes"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("isClosed "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("isClosed2 "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 缝合s 折线集合\n * @param {Array} polylines  路基 点集的集合，\n * @returns {Array} 返回三角形集合 如果有所用范围索引，否则返回顶点\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("linkPolyline")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("polylines"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[a._v("/**\n * 缝合 多边形集合\n * @param {Array} polygon\n * @returns {Array} 返回三角形集合 如果有所用范围索引，否则返回顶点\n */")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("linkPloygon")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("polygon"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])])])])}),[],!1,null,null,null);t.default=r.exports}}]);